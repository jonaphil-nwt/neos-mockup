prototype(Networkteam.Neos.Mockup:Components.Organisms.Navbar) < prototype(Neos.Fusion:Component) {
    items = ${[]}
    title = ''
    // e.g. can be used to use logo component from outside, or any tag
    titleEntity = null

    hamburgerIcon = Neos.Fusion:ResourceUri {
        path = 'resource://Networkteam.Neos.Mockup/Public/Icons/hamburger.svg'
    }

    renderer = afx`
        <nav id="mainnav" class="navigation">
            <ul class='menu'>
                <li class="logo">{props.titleEntity || props.title}</li>
                <Networkteam.Neos.Mockup:Components.Organisms.Navbar.ItemList items={props.items} />
                <li class="toggle">
                    <a href="#">
                        <span>
                            <object data={props.hamburgerIcon} class="no-pointer-events position-right" type="image/svg+xml" width="30" height="30"></object>
                        </span>
                    </a>
                </li>
            </ul>
        </nav>
    `
}

prototype(Networkteam.Neos.Mockup:Components.Organisms.Navbar.ItemList) < prototype(Neos.Fusion:Component) {
    items = ${[]}
    menuLevel = 1

    renderer = afx`
        <Neos.Fusion:Loop items={props.items} @children='itemRenderer'>
            <Networkteam.Neos.Mockup:Components.Organisms.Navbar.ItemList.Item
                label={item.label}
                state={item.state}
                link={item.link}
                subItems={item.subItems}
                menuLevel={props.menuLevel}
            />
        </Neos.Fusion:Loop>
    `
}

prototype(Networkteam.Neos.Mockup:Components.Organisms.Navbar.ItemList.Item) < prototype(Neos.Fusion:Component) {
    label = ''
    state = ''
    link = ''
    subitems = ${[]}
    identifier = ''
    menuLevel = 1

    caretDownSrc = Neos.Fusion:ResourceUri {
        path = 'resource://Networkteam.Neos.Mockup/Public/Icons/caret-down.svg'
    }

    hasSubmenu = ${this.subItems && this.menuLevel < 2}

    renderer = afx`
        <li class={props.state + (props.menuLevel > 1 ? ' subitem' : ' item') + (props.hasSubmenu ? ' has-submenu' : '')}>
            <a href={props.link} title={props.label}>
                {props.label}
                <object @if.hasSubmenu={props.hasSubmenu} data={props.caretDownSrc} class="no-pointer-events absolute-inline" type="image/svg+xml" width="10" height="10"></object>
            </a>
            <ul @if.hasSubitems={props.subItems && props.menuLevel < 2} class="submenu">
                <Networkteam.Neos.Mockup:Components.Organisms.Navbar.ItemList
                    items={props.subItems}
                    menuLevel={props.menuLevel + 1}
                />
            </ul>
        </li>
    `
}

prototype(Networkteam.Neos.Mockup:Components.Organisms.Navbar.Scripts) < prototype(Neos.Fusion:Component) {
    @context {
        closeIconSrc = Neos.Fusion:ResourceUri {
            path = 'resource://Networkteam.Neos.Mockup/Public/Icons/close.svg'
        }
        hamburgerSrc = Neos.Fusion:ResourceUri {
            path = 'resource://Networkteam.Neos.Mockup/Public/Icons/hamburger.svg'
        }
    }
    closeIcon = ${Json.stringify('<object data=' + closeIconSrc + ' class="no-pointer-events" type="image/svg+xml" width="30" height="30"></object>')}
    hamburger = ${Json.stringify('<object data=' + hamburgerSrc + ' class="no-pointer-events" type="image/svg+xml" width="30" height="30"></object>')}

    renderer = afx`
        <script>
            const closeIcon = {props.closeIcon};
            const hamburger = {props.hamburger};
            {"(function ()
              {
                const toggle = document.querySelector('.toggle');
                const menu = document.querySelector('.menu');
                const items = document.querySelectorAll('.item');

                /* Toggle mobile menu */
                function toggleMenu() {
                    if (menu.classList.contains('active')) {
                        menu.classList.remove('active');
                        /* TODO: add a working icon*/
                        toggle.querySelector('a').innerHTML = hamburger;
                    } else {
                        menu.classList.add('active');
                        /* TODO: add a working icon*/
                        toggle.querySelector('a').innerHTML = closeIcon;
                    }
                }

                /* Activate Submenu */
                function toggleItem() {
                    if (this.classList.contains('submenu-active')) {
                        this.classList.remove('submenu-active');
                    } else if (menu.querySelector('.submenu-active')) {
                        menu.querySelector('.submenu-active').classList.remove('submenu-active');
                        this.classList.add('submenu-active');
                    } else {
                        this.classList.add('submenu-active');
                    }
                }

                /* Close Submenu From Anywhere */
                function closeSubmenu(e) {
                    if (menu.querySelector('.submenu-active')) {
                        let isClickInside = menu
                            .querySelector('.submenu-active')
                            .contains(e.target);

                        if (!isClickInside && menu.querySelector('.submenu-active')) {
                            menu.querySelector('.submenu-active').classList.remove('submenu-active');
                        }
                    }
                }
                /* Event Listeners */
                toggle.addEventListener('click', toggleMenu, false);
                document.body.addEventListener('click', closeSubmenu, false);

                for (let item of items) {
                    if (item.querySelector('.submenu')) {
                        item.addEventListener('mouseenter', toggleItem, false);
                        item.addEventListener('mouseout', closeSubmenu, false);
                    }
                        item.addEventListener('keypress', toggleItem, false);
                    }
                }
            )()"}


        </script>
    `
}
